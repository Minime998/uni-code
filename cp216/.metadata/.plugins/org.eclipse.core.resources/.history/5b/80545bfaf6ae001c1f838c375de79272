/*
 -------------------------
 File: File Name
 Project: Project name
 -------------------------
 Author: Matthew Borkowski
 ID: 201588010
 Email: bork8010@mylaurier.ca
 Version YYYY-MM-DD
 -------------------------
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "heap.h"



void heapify_up(HEAP *heap, int index) {
    int parent_index;
    HNODE val = *(heap->hna + index); //ending value
    HNODE parent;
    while (index) {
        parent_index = (index - 1) >> 1;
        parent = *(heap->hna + parent_index);
        if (cmp(parent.key, val.key) == -1) {
            //parent is already less than child, nothing to do
            break;
        } else {
            //swap values
            *(heap->hna + index) = *(heap->hna + parent_index);
            index = parent_index;
        }
    }
    //put val in proper place
    *(heap->hna + index) = val;
}

void heapify_down(HEAP *heap, int index) {
    int curr_index = 0;
    int child_index =
            2 * curr_index + 2 < heap->size ?
                    cmp(heap->hna[2 * curr_index + 1].key,
                            heap->hna[2 * curr_index + 2].key) == -1 ?
                            2 * curr_index + 1 : 2 * curr_index + 2
            :
            2 * curr_index + 1 < heap->size ? 2 * curr_index + 1 : curr_index;
    while (cmp(heap->hna[curr_index].key, heap->hna[child_index].key) == 1) {
        // Swap the current node and its child node
        HNODE temp = heap->hna[curr_index];
        heap->hna[curr_index] = heap->hna[child_index];
        heap->hna[child_index] = temp;

        curr_index = child_index;
        child_index =
                2 * curr_index + 2 < heap->size ?
                        cmp(heap->hna[2 * curr_index + 1].key,
                                heap->hna[2 * curr_index + 2].key) == -1 ?
                                2 * curr_index + 1 : 2 * curr_index + 2
                :
                2 * curr_index + 1 < heap->size ?
                        2 * curr_index + 1 : curr_index;
    }

}

HEAP *new_heap(int capacity)
{
    HEAP hp = (HEAP) malloc(sizeof(HEAP));
    hp->capacity = capacity;
    hp->size = 0;
    hp->hna = (HNODE*) malloc(sizeof(HNODE) * capacity);
    return hp;
}

void insert(HEAP *heap, HNODE new_node)
{
    //check if heap is full
    if (heap->size == heap->capacity) {
        heap->capacity *= 2; //double the capacity
        HNODE *temp = realloc(heap->hna, sizeof(HNODE) * heap->capacity);
        if (temp) {
            heap->hna = temp;
        } else {
            temp = malloc(sizeof(HNODE) * heap->capacity);
            if (temp) {
                memcpy(temp, heap->hna, sizeof(HNODE) * heap->size);
                free(heap->hna);
                heap->hna = temp;
            } else {
                printf("array resize failed\n");
            }
        }
    }
    *(heap->hna + heap->size) = new_node;
    heapify_up(heap, heap->size);
    heap->size++;

}


HNODE extract_min(HEAP *heap)
{
// your implementation
}


int change_key(HEAP *heap, int index, KEYTYPE new_key)
{
// your implementation

}

int find_data_index(HEAP *heap, DATA data) {
// your implementation
}

int cmp(KEYTYPE a, KEYTYPE b) {
// your implementation
}

